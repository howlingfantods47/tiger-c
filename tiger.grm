%{
#include <stdio.h>
#include "util.h"
#include "symbol.h"
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}

//%debug

%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
    A_dec dec;
    A_namety namety;
    A_ty ty;
    A_field field;
    A_fundec fundec;
    A_efield efield;
    A_expList expList;
    A_decList decList;
    A_nametyList nametyList;
    A_fundecList fundecList;
    A_fieldList fieldList;
    A_efieldList efieldList;
	/* et cetera */
	}

%token <sval> ID STRING
%token <ival> INT

%token
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
  LBRACE RBRACE DOT
  PLUS MINUS UMINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
  BREAK NIL
  FUNCTION VAR TYPE

%nonassoc THEN
%nonassoc ELSE
%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%type <exp> exp program funcall arith_exp comp_exp bool_exp record_create array_create
%type <var> lvalue
%type <dec> dec vardec
%type <namety> tydec
%type <ty> ty
%type <field> tyfield
%type <fundec> fundec
%type <efield> record_create_field
%type <expList> explist expseq
%type <decList> decs
%type <nametyList> tydeclist
%type <fundecList> fundeclist
%type <fieldList> tyfields
%type <efieldList> record_create_list
/* et cetera */

%start program

%%

program:   exp    {absyn_root=$1;}

exp
  : lvalue      {$$ = A_VarExp(EM_tokPos, $1);}
  | NIL         {$$ = A_NilExp(EM_tokPos);}
  | INT         {$$ = A_IntExp(EM_tokPos, $1);}
  | STRING      {$$ = A_StringExp(EM_tokPos, $1);}
  | MINUS exp   %prec UMINUS    {$$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2);}
  | funcall     {$$ = $1;}
  | arith_exp   {$$ = $1;}
  | comp_exp    {$$ = $1;}
  | bool_exp    {$$ = $1;}
  | record_create   {$$ = $1;}
  | array_create    {$$ = $1;}
  | lvalue ASSIGN exp           {$$ = A_AssignExp(EM_tokPos, $1, $3);}
  | IF exp THEN exp ELSE exp    {$$ = A_IfExp(EM_tokPos, $2, $4, $6);}
  | IF exp THEN exp             {$$ = A_IfExp(EM_tokPos, $2, $4, A_NilExp(EM_tokPos));}
  | WHILE exp DO exp            {$$ = A_WhileExp(EM_tokPos, $2, $4);}
  | FOR ID ASSIGN exp TO exp DO exp     {$$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, $6, $8);}
  | BREAK                       {$$ = A_BreakExp(EM_tokPos);}
  | LET decs IN expseq END      {$$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4));}
  | LPAREN expseq RPAREN        {$$ = A_SeqExp(EM_tokPos, $2);}

decs
  :             {$$ = NULL;}
  | dec decs    {$$ = A_DecList($1, $2);}

dec
  : tydeclist   {$$ = A_TypeDec(EM_tokPos, $1);}
  | vardec      {$$ = $1;}
  | fundeclist  {$$ = A_FunctionDec(EM_tokPos, $1);}

tydeclist : tydec       {$$ = A_NametyList($1, NULL);}
          | tydec tydeclist {$$ = A_NametyList($1, $2);}

tydec: TYPE ID EQ ty    {$$ = A_Namety(S_Symbol($2), $4);}

ty
  : ID      {$$ = A_NameTy(EM_tokPos, S_Symbol($1));}
  | LBRACE tyfields RBRACE  {$$ = A_RecordTy(EM_tokPos, $2);}
  | ARRAY OF ID     {$$ = A_ArrayTy(EM_tokPos, S_Symbol($3));}

tyfield: ID COLON ID    {$$ = A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3));}

tyfields
  :             {$$ = NULL;}
  | tyfield     {$$ = A_FieldList($1, NULL);}
  | tyfield COMMA tyfields  {$$ = A_FieldList($1, $3);}

vardec
  : VAR ID ASSIGN exp   {$$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $4);}
  | VAR ID COLON ID ASSIGN exp  {$$ = A_VarDec(EM_tokPos, S_Symbol($2), S_Symbol($4), $6);}

fundeclist: fundec     {$$ = A_FundecList($1, NULL);}
          | fundec fundeclist   {$$ = A_FundecList($1, $2);}

fundec
  : FUNCTION ID LPAREN tyfields RPAREN EQ exp   {$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7);}
  | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  {$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol($7), $9);}

record_create
  : ID LBRACE record_create_list RBRACE {$$ = A_RecordExp(EM_tokPos, S_Symbol($1), $3);}

record_create_list
  :         {$$ = NULL;}
  | record_create_field     {$$ = A_EfieldList($1, NULL);}
  | record_create_field COMMA record_create_list    {$$ = A_EfieldList($1, $3);}

record_create_field: ID EQ exp  {$$ = A_Efield(S_Symbol($1), $3);}

array_create
  : ID LBRACK exp RBRACK OF exp     {$$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $6);}

expseq
  :                         {$$ = NULL;}
  | exp                     {$$ = A_ExpList($1, NULL);}
  | exp SEMICOLON expseq    {$$ = A_ExpList($1, $3);}


funcall
  : ID LPAREN explist RPAREN    {$$ = A_CallExp(EM_tokPos, S_Symbol($1), $3);}

explist
  :                         {$$ = NULL;}
  | exp                     {$$ = A_ExpList($1, NULL);}
  | exp COMMA explist       {$$ = A_ExpList($1, $3);}

arith_exp
  : exp PLUS exp            {$$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
  | exp MINUS exp           {$$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
  | exp TIMES exp           {$$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
  | exp DIVIDE exp          {$$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3);}

comp_exp
  : exp EQ exp            {$$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
  | exp NEQ exp           {$$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3);}
  | exp LT exp            {$$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3);}
  | exp LE exp            {$$ = A_OpExp(EM_tokPos, A_leOp, $1, $3);}
  | exp GT exp            {$$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3);}
  | exp GE exp            {$$ = A_OpExp(EM_tokPos, A_geOp, $1, $3);}

bool_exp
  : exp AND exp         {$$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0));}
  | exp OR exp          {$$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3);}

lvalue
  : ID      {$$ = A_SimpleVar(EM_tokPos, S_Symbol($1));}
  | ID LBRACK exp RBRACK    {$$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3);}
  | lvalue LBRACK exp RBRACK    {$$ = A_SubscriptVar(EM_tokPos, $1, $3);}
  | lvalue DOT ID   {$$ = A_FieldVar(EM_tokPos, $1, S_Symbol($3));}

